#ifndef _VideoDevice_h_
#define _VideoDevice_h_

#include "vgmdef.h"
#include <string>
#include <map>
#include "Array.h"

using namespace std;

class Vector2
{
public:
	Vector2(f32 x_ = 0, f32 y_ = 0)
	{
		x = x_;
		y = y_;
	}

	f32 x;
	f32 y;
};

class Rect
{
public:
	Rect(f32 x_ = 0, f32 y_ = 0, f32 w_ = 0, f32 h_ = 0)
	{
		x = x_;
		y = y_;
		w = w_;
		h = h_;
	}

	f32 x;
	f32 y;
	f32 w;
	f32 h;
};

class Color
{
public:
	Color(f32 r_ = 0.0f, f32 g_ = 0.0f, f32 b_ = 0.0f, f32 a_ = 0.0f)
	{
		r = r_;
		g = g_;
		b = b_;
		a = a_;
	}

	friend Color operator * (const Color& c, f32 scale)
	{
		Color result;

		result.r = c.r * scale;
		result.g = c.g * scale;
		result.b = c.b * scale;
		result.a = c.a * scale;

		return result;
	}

	Color& operator *= (const f32& scale)
	{
		this->r *= scale;
		this->g *= scale;
		this->b *= scale;
		this->a *= scale;
		return *this;
	}

	static const Color Black;
	static const Color Blue;
	static const Color Green;
	static const Color Cyan;
	static const Color Red;
	static const Color Mangenta;
	static const Color Brown;
	static const Color Grey;
	static const Color BrightBlue;
	static const Color BrightGreen;
	static const Color BrightCyan;
	static const Color BrightRed;
	static const Color BrightMangenta;
	static const Color Yellow;
	static const Color White;

	f32 r;
	f32 g;
	f32 b;
	f32 a;
};

enum class VideoDeviceEnum
{
	True = -1,
	False,
	STENCIL_BUFFER_BIT,
	COLOR_BUFFER_BIT,

	PROJECTION,
	MODELVIEW,

	POINTS,
	LINES,
	LINE_LOOP,
	LINE_STRIP,
	TRIANGLES,
	TRIANGLE_STRIP,
	TRIANGLE_FAN,
	ZERO,
	ONE,
	SRC_COLOR,
	ONE_MINUS_SRC_COLOR,
	SRC_ALPHA,
	ONE_MINUS_SRC_ALPHA,
	DST_ALPHA,
	ONE_MINUS_DST_ALPHA,
	DST_COLOR,
	ONE_MINUS_DST_COLOR,
	SRC_ALPHA_SATURATE,
	FUNC_ADD,
	BLEND_EQUATION,
	BLEND_EQUATION_RGB,
	BLEND_EQUATION_ALPHA,
	FUNC_SUBTRACT,
	FUNC_REVERSE_SUBTRACT,
	BLEND_DST_RGB,
	BLEND_SRC_RGB,
	BLEND_DST_ALPHA,
	BLEND_SRC_ALPHA,
	CONSTANT_COLOR,
	ONE_MINUS_CONSTANT_COLOR,
	CONSTANT_ALPHA,
	ONE_MINUS_CONSTANT_ALPHA,
	BLEND_COLOR,
	ARRAY_BUFFER,
	ELEMENT_ARRAY_BUFFER,
	ARRAY_BUFFER_BINDING,
	ELEMENT_ARRAY_BUFFER_BINDING,
	STREAM_DRAW,
	STATIC_DRAW,
	DYNAMIC_DRAW,
	BUFFER_SIZE,
	BUFFER_USAGE,
	CURRENT_VERTEX_ATTRIB,
	FRONT,
	BACK,
	FRONT_AND_BACK,
	CULL_FACE,
	BLEND,
	DITHER,
	STENCIL_TEST,
	DEPTH_TEST,
	SCISSOR_TEST,
	POLYGON_OFFSET_FILL,
	SAMPLE_ALPHA_TO_COVERAGE,
	SAMPLE_COVERAGE,
	ERROR_NONE,
	INVALID_ENUM,
	INVALID_VALUE,
	INVALID_OPERATION,
	OUT_OF_MEMORY,
	CW,
	CCW,
	LINE_WIDTH,
	ALIASED_POINT_SIZE_RANGE,
	ALIASED_LINE_WIDTH_RANGE,
	CULL_FACE_MODE,
	FRONT_FACE,
	DEPTH_RANGE,
	DEPTH_WRITEMASK,
	DEPTH_CLEAR_VALUE,
	DEPTH_FUNC,
	STENCIL_CLEAR_VALUE,
	STENCIL_FUNC,
	STENCIL_FAIL,
	STENCIL_PASS_DEPTH_FAIL,
	STENCIL_PASS_DEPTH_PASS,
	STENCIL_REF,
	STENCIL_VALUE_MASK,
	STENCIL_WRITEMASK,
	STENCIL_BACK_FUNC,
	STENCIL_BACK_FAIL,
	STENCIL_BACK_PASS_DEPTH_FAIL,
	STENCIL_BACK_PASS_DEPTH_PASS,
	STENCIL_BACK_REF,
	STENCIL_BACK_VALUE_MASK,
	STENCIL_BACK_WRITEMASK,
	VIEWPORT,
	SCISSOR_BOX,
	COLOR_CLEAR_VALUE,
	COLOR_WRITEMASK,
	UNPACK_ALIGNMENT,
	PACK_ALIGNMENT,
	MAX_TEXTURE_SIZE,
	MAX_VIEWPORT_DIMS,
	SUBPIXEL_BITS,
	RED_BITS,
	GREEN_BITS,
	BLUE_BITS,
	ALPHA_BITS,
	DEPTH_BITS,
	STENCIL_BITS,
	POLYGON_OFFSET_UNITS,
	POLYGON_OFFSET_FACTOR,
	TEXTURE_BINDING_2D,
	SAMPLE_BUFFERS,
	SAMPLES,
	SAMPLE_COVERAGE_VALUE,
	SAMPLE_COVERAGE_INVERT,
	COMPRESSED_TEXTURE_FORMATS,
	DONT_CARE,
	FASTEST,
	NICEST,
	GENERATE_MIPMAP_HINT,
	BYTE,
	UNSIGNED_BYTE,
	SHORT,
	UNSIGNED_SHORT,
	INT,
	UNSIGNED_INT,
	FLOAT,
	DEPTH_COMPONENT,
	ALPHA,
	RGB,
	RGBA,
	LUMINANCE,
	LUMINANCE_ALPHA,
	UNSIGNED_SHORT_4_4_4_4,
	UNSIGNED_SHORT_5_5_5_1,
	UNSIGNED_SHORT_5_6_5,
	FRAGMENT_SHADER,
	VERTEX_SHADER,
	MAX_VERTEX_ATTRIBS,
	MAX_VERTEX_UNIFORM_VECTORS,
	MAX_VARYING_VECTORS,
	MAX_COMBINED_TEXTURE_IMAGE_UNITS,
	MAX_VERTEX_TEXTURE_IMAGE_UNITS,
	MAX_TEXTURE_IMAGE_UNITS,
	MAX_FRAGMENT_UNIFORM_VECTORS,
	SHADER_TYPE,
	DELETE_STATUS,
	LINK_STATUS,
	VALIDATE_STATUS,
	ATTACHED_SHADERS,
	ACTIVE_UNIFORMS,
	ACTIVE_ATTRIBUTES,
	SHADING_LANGUAGE_VERSION,
	CURRENT_PROGRAM,
	NEVER,
	LESS,
	EQUAL,
	LEQUAL,
	GREATER,
	NOTEQUAL,
	GEQUAL,
	ALWAYS,
	KEEP,
	REPLACE,
	INCR,
	DECR,
	INVERT,
	INCR_WRAP,
	DECR_WRAP,
	VENDOR,
	RENDERER,
	VERSION,
	NEAREST,
	LINEAR,
	NEAREST_MIPMAP_NEAREST,
	LINEAR_MIPMAP_NEAREST,
	NEAREST_MIPMAP_LINEAR,
	LINEAR_MIPMAP_LINEAR,
	TEXTURE_MAG_FILTER,
	TEXTURE_MIN_FILTER,
	TEXTURE_WRAP_S,
	TEXTURE_WRAP_T,
	TEXTURE_2D,
	TEXTURE,
	TEXTURE_CUBE_MAP,
	TEXTURE_BINDING_CUBE_MAP,
	TEXTURE_CUBE_MAP_POSITIVE_X,
	TEXTURE_CUBE_MAP_NEGATIVE_X,
	TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y,
	TEXTURE_CUBE_MAP_POSITIVE_Z,
	TEXTURE_CUBE_MAP_NEGATIVE_Z,
	MAX_CUBE_MAP_TEXTURE_SIZE,
	TEXTURE0,
	TEXTURE1,
	TEXTURE2,
	TEXTURE3,
	TEXTURE4,
	TEXTURE5,
	TEXTURE6,
	TEXTURE7,
	TEXTURE8,
	TEXTURE9,
	TEXTURE10,
	TEXTURE11,
	TEXTURE12,
	TEXTURE13,
	TEXTURE14,
	TEXTURE15,
	TEXTURE16,
	TEXTURE17,
	TEXTURE18,
	TEXTURE19,
	TEXTURE20,
	TEXTURE21,
	TEXTURE22,
	TEXTURE23,
	TEXTURE24,
	TEXTURE25,
	TEXTURE26,
	TEXTURE27,
	TEXTURE28,
	TEXTURE29,
	TEXTURE30,
	TEXTURE31,
	ACTIVE_TEXTURE,
	REPEAT,
	CLAMP_TO_EDGE,
	MIRRORED_REPEAT,
	FLOAT_VEC2,
	FLOAT_VEC3,
	FLOAT_VEC4,
	INT_VEC2,
	INT_VEC3,
	INT_VEC4,
	BOOL,
	BOOL_VEC2,
	BOOL_VEC3,
	BOOL_VEC4,
	FLOAT_MAT2,
	FLOAT_MAT3,
	FLOAT_MAT4,
	SAMPLER_2D,
	SAMPLER_CUBE,
	VERTEX_ATTRIB_ARRAY_ENABLED,
	VERTEX_ATTRIB_ARRAY_SIZE,
	VERTEX_ATTRIB_ARRAY_STRIDE,
	VERTEX_ATTRIB_ARRAY_TYPE,
	VERTEX_ATTRIB_ARRAY_NORMALIZED,
	VERTEX_ATTRIB_ARRAY_POINTER,
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,
	IMPLEMENTATION_COLOR_READ_TYPE,
	IMPLEMENTATION_COLOR_READ_FORMAT,
	COMPILE_STATUS,
	LOW_FLOAT,
	MEDIUM_FLOAT,
	HIGH_FLOAT,
	LOW_INT,
	MEDIUM_INT,
	HIGH_INT,
	FRAMEBUFFER,
	RENDERBUFFER,
	RGBA4,
	RGB5_A1,
	RGB565,
	DEPTH_COMPONENT16,
	STENCIL_INDEX,
	STENCIL_INDEX8,
	DEPTH_STENCIL,
	RENDERBUFFER_WIDTH,
	RENDERBUFFER_HEIGHT,
	RENDERBUFFER_INTERNAL_FORMAT,
	RENDERBUFFER_RED_SIZE,
	RENDERBUFFER_GREEN_SIZE,
	RENDERBUFFER_BLUE_SIZE,
	RENDERBUFFER_ALPHA_SIZE,
	RENDERBUFFER_DEPTH_SIZE,
	RENDERBUFFER_STENCIL_SIZE,
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,
	COLOR_ATTACHMENT0,
	DEPTH_ATTACHMENT,
	STENCIL_ATTACHMENT,
	DEPTH_STENCIL_ATTACHMENT,
	NONE,
	FRAMEBUFFER_COMPLETE,
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT,
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
	// FRAMEBUFFER_INCOMPLETE_DIMENSIONS,
	FRAMEBUFFER_UNSUPPORTED,
	FRAMEBUFFER_BINDING,
	RENDERBUFFER_BINDING,
	MAX_RENDERBUFFER_SIZE,
	INVALID_FRAMEBUFFER_OPERATION,
	// UNPACK_FLIP_Y_WEBGL,
	// UNPACK_PREMULTIPLY_ALPHA_WEBGL,
	// CONTEXT_LOST_WEBGL,
	// UNPACK_COLORSPACE_CONVERSION_WEBGL,
	// BROWSER_DEFAULT_WEBGL,
	READ_BUFFER,
	UNPACK_ROW_LENGTH,
	UNPACK_SKIP_ROWS,
	UNPACK_SKIP_PIXELS,
	PACK_ROW_LENGTH,
	PACK_SKIP_ROWS,
	PACK_SKIP_PIXELS,
	COLOR,
	DEPTH,
	STENCIL,
	RED,
	RGB8,
	RGBA8,
	RGB10_A2,
	TEXTURE_BINDING_3D,
	UNPACK_SKIP_IMAGES,
	UNPACK_IMAGE_HEIGHT,
	TEXTURE_3D,
	TEXTURE_WRAP_R,
	MAX_3D_TEXTURE_SIZE,
	UNSIGNED_INT_2_10_10_10_REV,
	MAX_ELEMENTS_VERTICES,
	MAX_ELEMENTS_INDICES,
	TEXTURE_MIN_LOD,
	TEXTURE_MAX_LOD,
	TEXTURE_BASE_LEVEL,
	TEXTURE_MAX_LEVEL,
	MIN,
	MAX,
	DEPTH_COMPONENT24,
	MAX_TEXTURE_LOD_BIAS,
	TEXTURE_COMPARE_MODE,
	TEXTURE_COMPARE_FUNC,
	CURRENT_QUERY,
	QUERY_RESULT,
	QUERY_RESULT_AVAILABLE,
	STREAM_READ,
	STREAM_COPY,
	STATIC_READ,
	STATIC_COPY,
	DYNAMIC_READ,
	DYNAMIC_COPY,
	MAX_DRAW_BUFFERS,
	DRAW_BUFFER0,
	DRAW_BUFFER1,
	DRAW_BUFFER2,
	DRAW_BUFFER3,
	DRAW_BUFFER4,
	DRAW_BUFFER5,
	DRAW_BUFFER6,
	DRAW_BUFFER7,
	DRAW_BUFFER8,
	DRAW_BUFFER9,
	DRAW_BUFFER10,
	DRAW_BUFFER11,
	DRAW_BUFFER12,
	DRAW_BUFFER13,
	DRAW_BUFFER14,
	DRAW_BUFFER15,
	MAX_FRAGMENT_UNIFORM_COMPONENTS,
	MAX_VERTEX_UNIFORM_COMPONENTS,
	SAMPLER_3D,
	SAMPLER_2D_SHADOW,
	FRAGMENT_SHADER_DERIVATIVE_HINT,
	PIXEL_PACK_BUFFER,
	PIXEL_UNPACK_BUFFER,
	PIXEL_PACK_BUFFER_BINDING,
	PIXEL_UNPACK_BUFFER_BINDING,
	FLOAT_MAT2x3,
	FLOAT_MAT2x4,
	FLOAT_MAT3x2,
	FLOAT_MAT3x4,
	FLOAT_MAT4x2,
	FLOAT_MAT4x3,
	SRGB,
	SRGB8,
	SRGB8_ALPHA8,
	COMPARE_REF_TO_TEXTURE,
	RGBA32F,
	RGB32F,
	RGBA16F,
	RGB16F,
	VERTEX_ATTRIB_ARRAY_INTEGER,
	MAX_ARRAY_TEXTURE_LAYERS,
	MIN_PROGRAM_TEXEL_OFFSET,
	MAX_PROGRAM_TEXEL_OFFSET,
	MAX_VARYING_COMPONENTS,
	TEXTURE_2D_ARRAY,
	TEXTURE_BINDING_2D_ARRAY,
	R11F_G11F_B10F,
	UNSIGNED_INT_10F_11F_11F_REV,
	RGB9_E5,
	UNSIGNED_INT_5_9_9_9_REV,
	TRANSFORM_FEEDBACK_BUFFER_MODE,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS,
	TRANSFORM_FEEDBACK_VARYINGS,
	TRANSFORM_FEEDBACK_BUFFER_START,
	TRANSFORM_FEEDBACK_BUFFER_SIZE,
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN,
	RASTERIZER_DISCARD,
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS,
	INTERLEAVED_ATTRIBS,
	SEPARATE_ATTRIBS,
	TRANSFORM_FEEDBACK_BUFFER,
	TRANSFORM_FEEDBACK_BUFFER_BINDING,
	RGBA32UI,
	RGB32UI,
	RGBA16UI,
	RGB16UI,
	RGBA8UI,
	RGB8UI,
	RGBA32I,
	RGB32I,
	RGBA16I,
	RGB16I,
	RGBA8I,
	RGB8I,
	RED_INTEGER,
	RGB_INTEGER,
	RGBA_INTEGER,
	SAMPLER_2D_ARRAY,
	SAMPLER_2D_ARRAY_SHADOW,
	SAMPLER_CUBE_SHADOW,
	UNSIGNED_INT_VEC2,
	UNSIGNED_INT_VEC3,
	UNSIGNED_INT_VEC4,
	INT_SAMPLER_2D,
	INT_SAMPLER_3D,
	INT_SAMPLER_CUBE,
	INT_SAMPLER_2D_ARRAY,
	UNSIGNED_INT_SAMPLER_2D,
	UNSIGNED_INT_SAMPLER_3D,
	UNSIGNED_INT_SAMPLER_CUBE,
	UNSIGNED_INT_SAMPLER_2D_ARRAY,
	DEPTH_COMPONENT32F,
	DEPTH32F_STENCIL8,
	FLOAT_32_UNSIGNED_INT_24_8_REV,
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING,
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE,
	FRAMEBUFFER_ATTACHMENT_RED_SIZE,
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE,
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE,
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE,
	FRAMEBUFFER_DEFAULT,
	UNSIGNED_INT_24_8,
	DEPTH24_STENCIL8,
	UNSIGNED_NORMALIZED,
	DRAW_FRAMEBUFFER_BINDING,
	READ_FRAMEBUFFER,
	DRAW_FRAMEBUFFER,
	READ_FRAMEBUFFER_BINDING,
	RENDERBUFFER_SAMPLES,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER,
	MAX_COLOR_ATTACHMENTS,
	COLOR_ATTACHMENT1,
	COLOR_ATTACHMENT2,
	COLOR_ATTACHMENT3,
	COLOR_ATTACHMENT4,
	COLOR_ATTACHMENT5,
	COLOR_ATTACHMENT6,
	COLOR_ATTACHMENT7,
	COLOR_ATTACHMENT8,
	COLOR_ATTACHMENT9,
	COLOR_ATTACHMENT10,
	COLOR_ATTACHMENT11,
	COLOR_ATTACHMENT12,
	COLOR_ATTACHMENT13,
	COLOR_ATTACHMENT14,
	COLOR_ATTACHMENT15,
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,
	MAX_SAMPLES,
	HALF_FLOAT,
	RG,
	RG_INTEGER,
	R8,
	RG8,
	R16F,
	R32F,
	RG16F,
	RG32F,
	R8I,
	R8UI,
	R16I,
	R16UI,
	R32I,
	R32UI,
	RG8I,
	RG8UI,
	RG16I,
	RG16UI,
	RG32I,
	RG32UI,
	VERTEX_ARRAY_BINDING,
	R8_SNORM,
	RG8_SNORM,
	RGB8_SNORM,
	RGBA8_SNORM,
	SIGNED_NORMALIZED,
	COPY_READ_BUFFER,
	COPY_WRITE_BUFFER,
	COPY_READ_BUFFER_BINDING,
	COPY_WRITE_BUFFER_BINDING,
	UNIFORM_BUFFER,
	UNIFORM_BUFFER_BINDING,
	UNIFORM_BUFFER_START,
	UNIFORM_BUFFER_SIZE,
	MAX_VERTEX_UNIFORM_BLOCKS,
	MAX_FRAGMENT_UNIFORM_BLOCKS,
	MAX_COMBINED_UNIFORM_BLOCKS,
	MAX_UNIFORM_BUFFER_BINDINGS,
	MAX_UNIFORM_BLOCK_SIZE,
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
	UNIFORM_BUFFER_OFFSET_ALIGNMENT,
	ACTIVE_UNIFORM_BLOCKS,
	UNIFORM_TYPE,
	UNIFORM_SIZE,
	UNIFORM_BLOCK_INDEX,
	UNIFORM_OFFSET,
	UNIFORM_ARRAY_STRIDE,
	UNIFORM_MATRIX_STRIDE,
	UNIFORM_IS_ROW_MAJOR,
	UNIFORM_BLOCK_BINDING,
	UNIFORM_BLOCK_DATA_SIZE,
	UNIFORM_BLOCK_ACTIVE_UNIFORMS,
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES,
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER,
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER,
	INVALID_INDEX,
	MAX_VERTEX_OUTPUT_COMPONENTS,
	MAX_FRAGMENT_INPUT_COMPONENTS,
	MAX_SERVER_WAIT_TIMEOUT,
	OBJECT_TYPE,
	SYNC_CONDITION,
	SYNC_STATUS,
	SYNC_FLAGS,
	SYNC_FENCE,
	SYNC_GPU_COMMANDS_COMPLETE,
	UNSIGNALED,
	SIGNALED,
	ALREADY_SIGNALED,
	TIMEOUT_EXPIRED,
	CONDITION_SATISFIED,
	
	SYNC_FLUSH_COMMANDS_BIT,
	VERTEX_ATTRIB_ARRAY_DIVISOR,
	ANY_SAMPLES_PASSED,
	ANY_SAMPLES_PASSED_CONSERVATIVE,
	SAMPLER_BINDING,
	RGB10_A2UI,
	INT_2_10_10_10_REV,
	TRANSFORM_FEEDBACK,
	TRANSFORM_FEEDBACK_PAUSED,
	TRANSFORM_FEEDBACK_ACTIVE,
	TRANSFORM_FEEDBACK_BINDING,
	TEXTURE_IMMUTABLE_FORMAT,
	MAX_ELEMENT_INDEX,
	TEXTURE_IMMUTABLE_LEVELS,
	//TIMEOUT_IGNORED,
	// MAX_CLIENT_WAIT_TIMEOUT_WEBGL,

	// QUERY_COUNTER_BITS_EXT,
	TIME_ELAPSED_EXT,
	// TIMESTAMP_EXT,
	// GPU_DISJOINT_EXT,

	COMPRESSED_RGB_S3TC_DXT1_EXT,
	COMPRESSED_RGBA_S3TC_DXT1_EXT,
	COMPRESSED_RGBA_S3TC_DXT3_EXT,
	COMPRESSED_RGBA_S3TC_DXT5_EXT,

	COMPRESSED_SRGB_S3TC_DXT1_EXT,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,

	COMPRESSED_R11_EAC,
	COMPRESSED_SIGNED_R11_EAC,
	COMPRESSED_RG11_EAC,
	COMPRESSED_SIGNED_RG11_EAC,
	COMPRESSED_RGB8_ETC2,
	COMPRESSED_SRGB8_ETC2,
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
	COMPRESSED_RGBA8_ETC2_EAC,
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,

	// COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
	// COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
	// COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
	// COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,

	COMPRESSED_RGBA_ASTC_4x4_KHR,
	COMPRESSED_RGBA_ASTC_5x4_KHR,
	COMPRESSED_RGBA_ASTC_5x5_KHR,
	COMPRESSED_RGBA_ASTC_6x5_KHR,
	COMPRESSED_RGBA_ASTC_6x6_KHR,
	COMPRESSED_RGBA_ASTC_8x5_KHR,
	COMPRESSED_RGBA_ASTC_8x6_KHR,
	COMPRESSED_RGBA_ASTC_8x8_KHR,
	COMPRESSED_RGBA_ASTC_10x5_KHR,
	COMPRESSED_RGBA_ASTC_10x6_KHR,
	COMPRESSED_RGBA_ASTC_10x8_KHR,
	COMPRESSED_RGBA_ASTC_10x10_KHR,
	COMPRESSED_RGBA_ASTC_12x10_KHR,
	COMPRESSED_RGBA_ASTC_12x12_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,

	MAX_TEXTURE_UNITS,
	MAX_UNIFORM_BUFFERS,
	COMPRESSED_TYPES
};

class Texture2D
{
public:
	Texture2D();
	~Texture2D();

	int GetWidth() const;
	int GetHeight() const;

	void Load(const char* path_);
	void Bind() const;

	void SetWrapS(VideoDeviceEnum wrapS_);
	void SetWrapR(VideoDeviceEnum wrapR_);
	void SetWrapT(VideoDeviceEnum wrapT_);
	void SetMinFilter(VideoDeviceEnum minFilter_);
	void SetMagFilter(VideoDeviceEnum magFilter_);
private:
	unsigned int handle;
	int width;
	int height;
	int nrComponents;

	VideoDeviceEnum wrapS;
	VideoDeviceEnum wrapR;
	VideoDeviceEnum wrapT;
	VideoDeviceEnum minFilter;
	VideoDeviceEnum magFilter;
};

class Font
{
public:
	struct Character 
	{
		unsigned int textureID; // ID handle of the glyph texture
		Vector2		 size;      // Size of glyph
		Vector2		 bearing;   // Offset from baseline to left/top of glyph
		unsigned int advance;   // Horizontal offset to advance to next glyph
	};

	Font();
	~Font();

	int Load(const char* path_, float size_);
	void RenderText(const char* text, float x, float y, float scale, const Color& color);
	int GetSize() const;
private:
	std::map<char, Character> characters;
	float size;
};

class VideoDeviceImpl;
class VideoDevice
{
public:
	VideoDevice();
	~VideoDevice();

	boolean Open(const string& name_, u32 x_, u32 y_, u32 width_, u32 height_);
	void Close();

	void MakeCurrent();
	boolean IsCurrent();
	void Flush();

	int GetWidth() const;
	int GetHeight() const;

	void ReadPixels(Vector<unsigned char>& buffer);
	void ReadPixels(void* buffer);

	void Enable(VideoDeviceEnum mode);
	void Disable(VideoDeviceEnum mode);

	void BlendFunc(VideoDeviceEnum sfactor, VideoDeviceEnum dfactor);
	void ClearColor(const Color& c);
	void Clear();
	void MatrixMode(VideoDeviceEnum mode);
	void LoadIdentity();
	void Ortho2D(int left, int right, int bottom, int top);
	void Viewport(int x_, int y_, int width_, int height_);

	Font* CreateFont(const char* filename_, int size_);
	void DestroyFont(Font* font);
	void SetFont(Font* font_);
	void SetFontScale(float scale_);
	void SetFontColor(const Color& color_);
	void DrawText(const char* text, float x, float y);

	void DrawPoint(const Vector2& v, const Color& c);
	void DrawLine(const Vector2& v0, const Color& c0, const Vector2& v1, const Color& c1, float thickness=1);
	void DrawWireTriangle(const Vector2& v0, const Color& c0, const Vector2& v1, const Color& c1, const Vector2& v2, const Color& c2);
	void DrawWireRectangle(const Vector2& v0, const Color& c0, const Vector2& v1, const Color& c1, const Vector2& v2, const Color& c2, const Vector2& v3, const Color& c3);
	void DrawWireCircle(const Vector2& center, f32 radius, const Color& c);

	void DrawSolidTriangle(const Vector2& v0, const Color& c0, const Vector2& v1, const Color& c1, const Vector2& v2, const Color& c2);
	void DrawSolidRectangle(const Vector2& v0, const Color& c0, const Vector2& v1, const Color& c1, const Vector2& v2, const Color& c2, const Vector2& v3, const Color& c3);
	void DrawSolidCircle(const Vector2& center, f32 radius, const Color& c);

	void DrawPrimitive(u32 primitive, const Vector2* vertices, const Color* colors, u32 count);

	//////////////////////////////////////////////////////////////
	void DrawTexPoint(const Texture2D& texture, const Vector2& v, const Color& c, const Vector2& t);
	void DrawTexLine(const Texture2D& texture, const Vector2& v0, const Color& c0, const Vector2& t0, const Vector2& v1, const Color& c1, const Vector2& t1);
	void DrawTexWireTriangle(const Texture2D& texture,
		const Vector2& v0, const Color& c0, const Vector2& t0,
		const Vector2& v1, const Color& c1, const Vector2& t1,
		const Vector2& v2, const Color& c2, const Vector2& t2);
	void DrawTexWireRectangle(const Texture2D& texture,
		const Vector2& v0, const Color& c0, const Vector2& t0,
		const Vector2& v1, const Color& c1, const Vector2& t1,
		const Vector2& v2, const Color& c2, const Vector2& t2,
		const Vector2& v3, const Color& c3, const Vector2& t3);

	void DrawTexSolidTriangle(const Texture2D& texture,
		const Vector2& v0, const Color& c0, const Vector2& t0,
		const Vector2& v1, const Color& c1, const Vector2& t1,
		const Vector2& v2, const Color& c2, const Vector2& t2);
	void DrawTexSolidRectangle(const Texture2D& texture,
		const Vector2& v0, const Color& c0, const Vector2& t0,
		const Vector2& v1, const Color& c1, const Vector2& t1,
		const Vector2& v2, const Color& c2, const Vector2& t2,
		const Vector2& v3, const Color& c3, const Vector2& t4);

	void DrawTexPrimitive(const Texture2D& texture, u32 primitive, const Vector2* v, const Color* c, const Vector2* t, u32 count);
protected:
private:
	////////////////////////////////////////////////////////////////////////////
public:
protected:
private:
	VideoDeviceImpl* impl;
};

#endif
